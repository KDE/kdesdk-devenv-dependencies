#!/usr/bin/env python3
import sys
import shutil
import subprocess
import operator

import gi
gi.require_version('PackageKitGlib', '1.0')
from gi.repository import PackageKitGlib as packagekit

client = packagekit.Client()

neededFiles = [
    #"gcc",
    #"g++",
    "bin/cmake",
    "bin/cmake-gui",
    "bin/git",
    "bin/gdb",
    #"clang",
    #"make",
    #"ninja",
    #"clazy",

    "qregularexpression.h", #QtCore, we are interested in Qt5
    "qquickwindow.h", #QtDeclarative
    "qtwebengineglobal.h", #QtWebEngine

    "ECMConfig.cmake",
    "KF5XmlGuiConfig.cmake",
    "KF5SolidConfig.cmake",
    "KF5DeclarativeConfig.cmake",
    "KF5KirigamiConfig.cmake",

    "plasmaengineexplorer",
    "plasmawindowed",
    "cuttlefish",
    "kate",
    "kdevelop"
]

def progressCallback(progress, type, user_data):
    pass
    #print('  ', type.value_name, 'package:', progress.props.package_id, ':', progress.props.percentage, '%')


class Global:
    debArchitecture = None

def searchFiles(v):
    #PackageKit
    #result = client.search_files(0, [v], None, progressCallback, None)
    #output = [p.get_name() for p in result.get_package_array()]
    #if output:
        #return output

    #ArchLinux
    if shutil.which("pkgfile"):
        output = subprocess.check_output(["pkgfile", v]).decode("utf-8").strip().split()
    #Debian
    elif shutil.which("apt-file"):
        if not Global.debArchitecture:
            Global.debArchitecture = subprocess.check_output(["dpkg", "--print-architecture"]).decode("utf-8").strip()
        output = subprocess.check_output(["apt-file", "search", "--package-only", "-x", "/"+v+"$", "--arch", Global.debArchitecture]).decode("utf-8").strip().split()

    return output

def main():
    packages = {}
    packagesNotFound = []
    for v in neededFiles:
        pkgs = searchFiles(v)

        if not pkgs:
            packagesNotFound.append(v)
        else:
            for p in pkgs:
                packages[p] = v
    print("Could not find packages for", packagesNotFound)
    print()
    print("We suggest the following packages:")
    for pkg in packages:
        print("* ", pkg, "<-", packages[pkg])

    # TODO: Add option to install them
    return 0

if __name__ == "__main__":
    sys.exit(main())
