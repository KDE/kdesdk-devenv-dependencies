#!/usr/bin/env python3
import sys
import shutil
import subprocess
import operator

import gi
gi.require_version('PackageKitGlib', '1.0')
from gi.repository import PackageKitGlib as packagekit

client = packagekit.Client()

neededFiles = [
    "Qt5CoreConfig.cmake",
    "Qt5QuickConfig.cmake",
    "Qt5WebEngineConfig.cmake",

    "ECMConfig.cmake",
    "KF5XmlGuiConfig.cmake",
    "KF5SolidConfig.cmake",
    "KF5DeclarativeConfig.cmake",
    "KF5KirigamiConfig.cmake" ]

neededBinaries =  [
    "gcc",
    "g++",
    "cmake",
    "cmake-gui",
    "git",
    "gdb",
    "clang",
    "make",
    "ninja",
    #"clazy",

    "plasmaengineexplorer",
    "plasmawindowed",
    "cuttlefish",
    "kate",
    "kdevelop"
]

def progressCallback(progress, type, user_data):
    pass
    #print('  ', type.value_name, 'package:', progress.props.package_id, ':', progress.props.percentage, '%')


class Global:
    debArchitecture = None

    packages = {}
    packagesNotFound = []

    def addResults(self, v, pkgs):
        if not pkgs:
            self.packagesNotFound.append(v)
        else:
            for p in pkgs:
                self.packages[p] = v

    def printNow(self):
        print("Could not find packages for", self.packagesNotFound)
        print()
        print("We suggest the following packages:")
        for pkg in self.packages:
            print("* ", pkg, "<-", self.packages[pkg])

def searchFiles(v, isExecutable):
    output = None

    #ArchLinux
    if shutil.which("pkgfile"):
        cmd = ["pkgfile", v]
        if isExecutable:
            cmd.insert(1, "-b")
        output = subprocess.check_output(cmd).decode("utf-8").strip().split()
    #Debian
    elif shutil.which("apt-file"):
        if not Global.debArchitecture:
            Global.debArchitecture = subprocess.check_output(["dpkg", "--print-architecture"]).decode("utf-8").strip()
        prefix = "/usr/bin/" if isExecutable else "/"
        output = subprocess.check_output(["apt-file", "search", "--package-only", "-x", prefix + v + "$", "--arch", Global.debArchitecture]).decode("utf-8").strip().split()
    elif shutil.which("pkcon"):
        result = client.search_files(0, [v], None, progressCallback, None)
        output = [p.get_name() for p in result.get_package_array()]

    #print("lolol", output, v)gy
    return output

def main():
    g = Global()

    for v in neededFiles:
        pkgs = searchFiles(v, False)
        g.addResults(v, pkgs)

    for v in neededBinaries:
        pkgs = searchFiles(v, True)
        g.addResults(v, pkgs)

    g.printNow()
    return 0

if __name__ == "__main__":
    sys.exit(main())
